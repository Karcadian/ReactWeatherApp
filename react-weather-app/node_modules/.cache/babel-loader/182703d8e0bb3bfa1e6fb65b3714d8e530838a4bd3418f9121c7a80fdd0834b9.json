{"ast":null,"code":"import{useState}from\"react\";import{AsyncPaginate}from\"react-select-async-paginate\";import{GEO_API_URL,geoApiOptions}from\"../../api\";import{jsx as _jsx}from\"react/jsx-runtime\";const Search=_ref=>{let{onSearchChange}=_ref;const[search,setSearch]=useState(null);const loadOptions=inputValue=>{return fetch(\"\".concat(GEO_API_URL,\"/cities?minPopulation=50000&namePrefix=\").concat(inputValue),geoApiOptions).then(response=>{if(!response.ok){throw new Error(\"Failed to fetch data. Status: \".concat(response.status));}return response.json();}).then(data=>{if(!data||!data.data||!Array.isArray(data.data)){throw new Error(\"Invalid response format from the API\");}const options=data.data.map(city=>({value:\"\".concat(city.latitude,\" \").concat(city.longitude),label:\"\".concat(city.name,\" \").concat(city.countryCode)}));return{options};}).catch(error=>{console.error(\"Error fetching data:\",error);throw error;});};const handleOnChange=searchData=>{setSearch(searchData);onSearchChange(searchData);};return/*#__PURE__*/_jsx(AsyncPaginate,{placeholder:\"Search for city\",debounceTimeout:600,value:search,onChange:handleOnChange,loadOptions:loadOptions});};export default Search;","map":{"version":3,"names":["useState","AsyncPaginate","GEO_API_URL","geoApiOptions","jsx","_jsx","Search","_ref","onSearchChange","search","setSearch","loadOptions","inputValue","fetch","concat","then","response","ok","Error","status","json","data","Array","isArray","options","map","city","value","latitude","longitude","label","name","countryCode","catch","error","console","handleOnChange","searchData","placeholder","debounceTimeout","onChange"],"sources":["/Users/jimmyle/GitHub/Karcadian.github.io/react-weather-app/src/components/search/search.js"],"sourcesContent":["import { useState } from \"react\";\nimport { AsyncPaginate } from \"react-select-async-paginate\";\nimport { GEO_API_URL, geoApiOptions } from \"../../api\";\n\nconst Search = ({ onSearchChange }) => {\n  const [search, setSearch] = useState(null);\n\n  const loadOptions = (inputValue) => {\n    return fetch(\n      `${GEO_API_URL}/cities?minPopulation=50000&namePrefix=${inputValue}`,\n      geoApiOptions\n    )\n      .then((response) => {\n        if (!response.ok) {\n          throw new Error(`Failed to fetch data. Status: ${response.status}`);\n        }\n        return response.json();\n      })\n      .then((data) => {\n        if (!data || !data.data || !Array.isArray(data.data)) {\n          throw new Error(\"Invalid response format from the API\");\n        }\n  \n        const options = data.data.map((city) => ({\n          value: `${city.latitude} ${city.longitude}`,\n          label: `${city.name} ${city.countryCode}`,\n        }));\n  \n        return { options };\n      })\n      .catch((error) => {\n        console.error(\"Error fetching data:\", error);\n        throw error;\n      });\n  };\n  \n\n  const handleOnChange = (searchData) => {\n      setSearch(searchData);\n      onSearchChange(searchData);\n  };\n\n  return (\n    <AsyncPaginate\n      placeholder=\"Search for city\"\n      debounceTimeout={600}\n      value={search}\n      onChange={handleOnChange}\n      loadOptions={loadOptions}\n    />\n  );\n};\n\nexport default Search;\n"],"mappings":"AAAA,OAASA,QAAQ,KAAQ,OAAO,CAChC,OAASC,aAAa,KAAQ,6BAA6B,CAC3D,OAASC,WAAW,CAAEC,aAAa,KAAQ,WAAW,CAAC,OAAAC,GAAA,IAAAC,IAAA,yBAEvD,KAAM,CAAAC,MAAM,CAAGC,IAAA,EAAwB,IAAvB,CAAEC,cAAe,CAAC,CAAAD,IAAA,CAChC,KAAM,CAACE,MAAM,CAAEC,SAAS,CAAC,CAAGV,QAAQ,CAAC,IAAI,CAAC,CAE1C,KAAM,CAAAW,WAAW,CAAIC,UAAU,EAAK,CAClC,MAAO,CAAAC,KAAK,IAAAC,MAAA,CACPZ,WAAW,4CAAAY,MAAA,CAA0CF,UAAU,EAClET,aACF,CAAC,CACEY,IAAI,CAAEC,QAAQ,EAAK,CAClB,GAAI,CAACA,QAAQ,CAACC,EAAE,CAAE,CAChB,KAAM,IAAI,CAAAC,KAAK,kCAAAJ,MAAA,CAAkCE,QAAQ,CAACG,MAAM,CAAE,CAAC,CACrE,CACA,MAAO,CAAAH,QAAQ,CAACI,IAAI,CAAC,CAAC,CACxB,CAAC,CAAC,CACDL,IAAI,CAAEM,IAAI,EAAK,CACd,GAAI,CAACA,IAAI,EAAI,CAACA,IAAI,CAACA,IAAI,EAAI,CAACC,KAAK,CAACC,OAAO,CAACF,IAAI,CAACA,IAAI,CAAC,CAAE,CACpD,KAAM,IAAI,CAAAH,KAAK,CAAC,sCAAsC,CAAC,CACzD,CAEA,KAAM,CAAAM,OAAO,CAAGH,IAAI,CAACA,IAAI,CAACI,GAAG,CAAEC,IAAI,GAAM,CACvCC,KAAK,IAAAb,MAAA,CAAKY,IAAI,CAACE,QAAQ,MAAAd,MAAA,CAAIY,IAAI,CAACG,SAAS,CAAE,CAC3CC,KAAK,IAAAhB,MAAA,CAAKY,IAAI,CAACK,IAAI,MAAAjB,MAAA,CAAIY,IAAI,CAACM,WAAW,CACzC,CAAC,CAAC,CAAC,CAEH,MAAO,CAAER,OAAQ,CAAC,CACpB,CAAC,CAAC,CACDS,KAAK,CAAEC,KAAK,EAAK,CAChBC,OAAO,CAACD,KAAK,CAAC,sBAAsB,CAAEA,KAAK,CAAC,CAC5C,KAAM,CAAAA,KAAK,CACb,CAAC,CAAC,CACN,CAAC,CAGD,KAAM,CAAAE,cAAc,CAAIC,UAAU,EAAK,CACnC3B,SAAS,CAAC2B,UAAU,CAAC,CACrB7B,cAAc,CAAC6B,UAAU,CAAC,CAC9B,CAAC,CAED,mBACEhC,IAAA,CAACJ,aAAa,EACZqC,WAAW,CAAC,iBAAiB,CAC7BC,eAAe,CAAE,GAAI,CACrBZ,KAAK,CAAElB,MAAO,CACd+B,QAAQ,CAAEJ,cAAe,CACzBzB,WAAW,CAAEA,WAAY,CAC1B,CAAC,CAEN,CAAC,CAED,cAAe,CAAAL,MAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}